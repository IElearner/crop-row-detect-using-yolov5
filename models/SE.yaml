# YOLOv5 🚀 by Ultralytics, GPL-3.0 license
#SENet是通道注意力机制的典型实现
#对于SENet而言，其重点是获得输入进来的特征层，每一个通道的权值。利用SENet，我们可以让网络关注它最需要关注的通道
#1、对输入的特征层进行全局平局池化
#2、然后进行两次全连接，第一次全连接输出的通道数会少一些，第二次全连接输出的通道数和输入的特征层相同
#3、在完成两次全连接之后，会使用一次sigmoid将值固定在[0,1]之间，此时我们获得了输入特征层每一个通道的权值
#4、将获得的权值与输入特征层相乘

#优点：
#简单有效：SE注意力机制提出简单，易于实现，同时在各种视觉任务中证明了其有效性。
#参数少：相较于其他注意力机制，SE模块的参数量相对较少，因此在性能和计算开销之间取得了平衡。
#
#缺点：
#计算相对复杂：虽然参数少，但在网络中引入SE模块可能增加计算的复杂性，特别是在大规模网络中。

# Parameters
nc: 80  # number of classes
depth_multiple: 0.33  # model depth multiple
width_multiple: 0.5  # layer channel multiple
anchors:
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
   [-1, 3, C3, [128]],
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 6, C3, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, C3, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
   [-1, 3, C3, [1024]],
   [-1, 1, SPPF, [1024, 5]],  # 9
   [ -1,1,SE,[ 1024,4 ] ]  #修改之处，添加SE模块
  ]

# YOLOv5 v6.0 head
head:
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4
   [-1, 3, C3, [512, False]],  # 13

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 15], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 11], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)

   [[18, 21, 24], 1, Segment, [nc, anchors, 32, 256]],  # Detect(P3, P4, P5)
  ]